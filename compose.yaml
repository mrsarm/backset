services:
  bss:
    container_name: bss
    image: "mrsarm/backset:${TAG:-latest}"
    build:
      context: .
      args:
        - BUILD
    ports:
      - "8558:8558"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres/bss_dev
      - APP_ENV
      - APP_URI
      - RUST_LOG
      - MAX_CONNECTIONS
      - MIN_CONNECTIONS
      - ACQUIRE_TIMEOUT_SEC
      - IDLE_TIMEOUT_SEC
      - TEST_BEFORE_ACQUIRE
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "/usr/app/bin/backset", "health"]
      interval: 10s
      timeout: 8s
#      retries: 3
#      start_period: 40s
#      start_interval: 5s

  postgres:
    image: postgres
    container_name: pg-bss
    environment:
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5433:5432"
    volumes:
      - data:/var/lib/postgresql/data
    command: ["postgres", "-c", "log_statement=all"]  # Comment to disable SQL logs. all: all queries, ddl: DDL only, mod: DDL and modifying statements

  psql:
    image: postgres
    command: psql postgres -h postgres -U postgres -W
    depends_on:
      - postgres
    profiles:       # To avoid the container start with `docker compose up'
      - tools

  sqlx:
    image: "mrsarm/backset:${TAG:-latest}"
    entrypoint: sqlx
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres/bss_dev
    depends_on:
      - postgres
    profiles:
      - tools

volumes:
  data:             # Volume name listed: backset_data
    driver: local

# - `docker compose up' to start postgres attached to the console. Add `-d' option
#   to start the container detached
# - Connect with `docker compose run psql`. To pass more options to `psql' use:
#   `docker compose run postgres psql postgres -h HOSTIP -U postgres -W [OPTIONS...]'
# - Run any pg_* command available in the container, e.g.
#   `docker compose run postgres pg_dump [OPTIONS]`
# - `docker compose stop' to stop the service if it was detached,
#    otherwise just press Ctrl+C to stop
# - `docker compose down' to shutdown and drop the container (the data will continue
#   stored in the 'backset_data' volume)
# - `docker volume rm backset_data' to drop the data from the volume (first
#   execute `docker compose down')
